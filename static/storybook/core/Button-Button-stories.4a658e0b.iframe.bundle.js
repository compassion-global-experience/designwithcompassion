"use strict";(self.webpackChunk_compassion_design_system_core=self.webpackChunk_compassion_design_system_core||[]).push([[228],{"./src/components/Button/Button.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Disabled:()=>Disabled,Emphasis:()=>Emphasis,Kinds:()=>Kinds,Playground:()=>Playground,Size:()=>Size,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Button"},createButton=({emphasis="primary",size="medium",disabled=!1,kind,label,onClick})=>{const btn=document.createElement("button");return btn.type="button",btn.innerText=label,btn.addEventListener("click",onClick),btn.className=[`button-${emphasis}`,size,kind].join(" "),btn.disabled=disabled,btn},Template=({label,...args})=>createButton({label,...args}),wrapperDiv=(story,decoratorDiv)=>{const wrapper=document.createElement("div");wrapper.setAttribute("style","display:flex; flex-direction: column; row-gap: 24px");const componentDiv=document.createElement("div");return componentDiv.appendChild(story()),wrapper.appendChild(decoratorDiv),wrapper.appendChild(componentDiv),wrapper},emphasisArgTypes={control:{type:"select"},options:["primary","secondary","tertiary"]},kindArgTypes={control:{type:"select"},options:["default","cta","white","inverted","destructive"]},sizeArgTypes={control:{type:"select"},options:["small","medium","large"]},disabledArgTypes={control:{type:"select"},options:[!0,!1]},Playground=Template.bind({});Playground.args={label:"Button"},Playground.argTypes={label:{control:"text"},onClick:{action:"onClick"},emphasis:emphasisArgTypes,kind:kindArgTypes,size:sizeArgTypes,disabled:disabledArgTypes};const Kinds=Template.bind({});Kinds.args={label:"Conrolled button"},Kinds.argTypes={kind:kindArgTypes},Kinds.decorators=[story=>{const decoratorDiv=document.createElement("div");decoratorDiv.setAttribute("style","display:flex; gap: 16px; align-items: start"),decoratorDiv.appendChild(createButton({label:"Default"})),decoratorDiv.appendChild(createButton({label:"CTA",kind:"cta"})),decoratorDiv.appendChild(createButton({label:"White",kind:"white"})),decoratorDiv.appendChild(createButton({label:"Inverted",kind:"inverted"})),decoratorDiv.appendChild(createButton({label:"Destructive",emphasis:"primary",kind:"destructive"}));return wrapperDiv(story,decoratorDiv)}];const Emphasis=Template.bind({});Emphasis.args={label:"Conrolled button"},Emphasis.argTypes={emphasis:emphasisArgTypes},Emphasis.decorators=[story=>{const decoratorDiv=document.createElement("div");decoratorDiv.setAttribute("style","display:flex; gap: 16px"),decoratorDiv.appendChild(createButton({label:"Primary"})),decoratorDiv.appendChild(createButton({label:"Secondary",emphasis:"secondary"})),decoratorDiv.appendChild(createButton({label:"Tertiary",emphasis:"tertiary"}));return wrapperDiv(story,decoratorDiv)}];const Size=Template.bind({});Size.args={label:"Conrolled button"},Size.argTypes={size:sizeArgTypes},Size.decorators=[story=>{const decoratorDiv=document.createElement("div");decoratorDiv.setAttribute("style","display:flex; gap: 16px; align-items: start"),decoratorDiv.appendChild(createButton({label:"Small",size:"small"})),decoratorDiv.appendChild(createButton({label:"Medium",size:"medium"})),decoratorDiv.appendChild(createButton({label:"Large",size:"large"}));return wrapperDiv(story,decoratorDiv)}];const Disabled=Template.bind({});Disabled.args={label:"Conrolled button"},Disabled.argTypes={disabled:disabledArgTypes};const __namedExportsOrder=["Playground","Kinds","Emphasis","Size","Disabled"];Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:"({\n  label,\n  ...args\n}) => {\n  // You can either use a function to create DOM elements or use a plain html string!\n  // return `<div>${label}</div>`;\n  return createButton({\n    label,\n    ...args\n  });\n}",...Playground.parameters?.docs?.source}}},Kinds.parameters={...Kinds.parameters,docs:{...Kinds.parameters?.docs,source:{originalSource:"({\n  label,\n  ...args\n}) => {\n  // You can either use a function to create DOM elements or use a plain html string!\n  // return `<div>${label}</div>`;\n  return createButton({\n    label,\n    ...args\n  });\n}",...Kinds.parameters?.docs?.source}}},Emphasis.parameters={...Emphasis.parameters,docs:{...Emphasis.parameters?.docs,source:{originalSource:"({\n  label,\n  ...args\n}) => {\n  // You can either use a function to create DOM elements or use a plain html string!\n  // return `<div>${label}</div>`;\n  return createButton({\n    label,\n    ...args\n  });\n}",...Emphasis.parameters?.docs?.source}}},Size.parameters={...Size.parameters,docs:{...Size.parameters?.docs,source:{originalSource:"({\n  label,\n  ...args\n}) => {\n  // You can either use a function to create DOM elements or use a plain html string!\n  // return `<div>${label}</div>`;\n  return createButton({\n    label,\n    ...args\n  });\n}",...Size.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:"({\n  label,\n  ...args\n}) => {\n  // You can either use a function to create DOM elements or use a plain html string!\n  // return `<div>${label}</div>`;\n  return createButton({\n    label,\n    ...args\n  });\n}",...Disabled.parameters?.docs?.source}}}}}]);